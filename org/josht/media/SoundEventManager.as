package org.josht.media{	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.media.Sound;	import flash.utils.Dictionary;	/**	 * Provides a simple interface for adding event listeners that play sounds.	 * 	 * @author Josh Tynjala (joshblog.net) 	 */	public class SoundEventManager	{		private static const TARGET_TO_TYPES:Dictionary = new Dictionary(true);				public static var mute:Boolean = false;				public static function attachSoundToEvent(target:IEventDispatcher, eventType:String, SoundType:Class):void		{			if(TARGET_TO_TYPES[target] === undefined)			{				TARGET_TO_TYPES[target] = {};			}			var eventTypeToSoundClass:Object = TARGET_TO_TYPES[target];			if(eventTypeToSoundClass.hasOwnProperty(eventType))			{				throw new IllegalOperationError("A sound is already registered to play when the specified target dispatches an event of type " + eventType); 			}						eventTypeToSoundClass[eventType] = SoundType;			target.addEventListener(eventType, eventHandler, false, 0, true);		}				public static function clearSoundForEvent(target:IEventDispatcher, eventType:String):void		{			if(TARGET_TO_TYPES[target] === undefined)			{				return;			}			var eventTypeToSoundClass:Object = TARGET_TO_TYPES[target];			if(!eventTypeToSoundClass.hasOwnProperty(eventType))			{				return;			}						delete eventTypeToSoundClass[eventType];			target.removeEventListener(eventType, eventHandler);						var stillHasEvents:Boolean = false;			for(var eventType:String in eventTypeToSoundClass)			{				stillHasEvents = true;				break;			}						if(!stillHasEvents)			{				delete TARGET_TO_TYPES[target];			}		}						public static function clearAllSoundsForTarget(target:IEventDispatcher):void		{			if(TARGET_TO_TYPES[target] === undefined)			{				return;			}			var eventTypeToSoundClass:Object = TARGET_TO_TYPES[target];			for(var eventType:String in eventTypeToSoundClass)			{				delete eventTypeToSoundClass[eventType];				target.removeEventListener(eventType, eventHandler);			}						//no sounds, so let's get rid of the reference			delete TARGET_TO_TYPES[target];		}				private static function eventHandler(event:Event):void		{			if(mute)			{				return;			}						var eventTypeToSoundClass:Object = TARGET_TO_TYPES[event.currentTarget];			var SoundType:Class = eventTypeToSoundClass[event.type];			var sound:Sound = new SoundType();			sound.play();		}	}}