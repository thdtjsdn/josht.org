/*
Copyright (c) 2010 Josh Tynjala

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
package org.josht.utils.math
{
	/**
	 * Tests equality for numbers that may have been generated by faulty floating point math.
	 * This is not an issue exclusive to the Flash Player, but all modern computing in general.
	 * The value is generally offset by an insignificant fraction, and it may be corrected.
	 * 
	 * <p>Alternatively, this function could be used for other purposes than to correct floating
	 * point errors. Certainly, it could determine if two very large numbers are within a certain
	 * range of difference. This might be useful for determining "ballpark" estimates or similar
	 * statistical analysis that may not need complete accuracy.</p>
	 * 
	 * @param		number1		the first number to test
	 * @param		number2		the second number to test
	 * @param		precision	the number of digits in the fractional portion to keep
	 * @return		true, if the numbers are close enough to be considered equal, false if not.
	 */
	public function fuzzyEquals(number1:Number, number2:Number, precision:int = 5):Boolean
	{
		var difference:Number = number1 - number2;
		var range:Number = Math.pow(10, -precision);
		
		//default precision checks the following:
		//0.00001 < difference > -0.00001
		
		return difference < range && difference > -range;
	}
}